/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  HealthcareRegistrationProver,
  HealthcareRegistrationProverInterface,
} from "../HealthcareRegistrationProver";

const _abi = [
  {
    type: "function",
    name: "main",
    inputs: [
      {
        name: "unverifiedEmail",
        type: "tuple",
        internalType: "struct UnverifiedEmail",
        components: [
          {
            name: "email",
            type: "string",
            internalType: "string",
          },
          {
            name: "dnsRecord",
            type: "tuple",
            internalType: "struct DnsRecord",
            components: [
              {
                name: "name",
                type: "string",
                internalType: "string",
              },
              {
                name: "recordType",
                type: "uint8",
                internalType: "uint8",
              },
              {
                name: "data",
                type: "string",
                internalType: "string",
              },
              {
                name: "ttl",
                type: "uint64",
                internalType: "uint64",
              },
            ],
          },
          {
            name: "verificationData",
            type: "tuple",
            internalType: "struct VerificationData",
            components: [
              {
                name: "validUntil",
                type: "uint64",
                internalType: "uint64",
              },
              {
                name: "signature",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "pubKey",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Proof",
        components: [
          {
            name: "seal",
            type: "tuple",
            internalType: "struct Seal",
            components: [
              {
                name: "verifierSelector",
                type: "bytes4",
                internalType: "bytes4",
              },
              {
                name: "seal",
                type: "bytes32[8]",
                internalType: "bytes32[8]",
              },
              {
                name: "mode",
                type: "uint8",
                internalType: "enum ProofMode",
              },
            ],
          },
          {
            name: "callGuestId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "length",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callAssumptions",
            type: "tuple",
            internalType: "struct CallAssumptions",
            components: [
              {
                name: "proverContractAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "functionSelector",
                type: "bytes4",
                internalType: "bytes4",
              },
              {
                name: "settleChainId",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "settleBlockNumber",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "settleBlockHash",
                type: "bytes32",
                internalType: "bytes32",
              },
            ],
          },
        ],
      },
      {
        name: "",
        type: "tuple",
        internalType: "struct HealthcareRegistrationProver.RegistrationData",
        components: [
          {
            name: "requestedRole",
            type: "uint8",
            internalType: "enum HealthcareRegistrationProver.UserType",
          },
          {
            name: "walletAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "domain",
            type: "string",
            internalType: "string",
          },
          {
            name: "organizationName",
            type: "string",
            internalType: "string",
          },
          {
            name: "emailHash",
            type: "bytes32",
            internalType: "bytes32",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "proof",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct Proof",
        components: [
          {
            name: "seal",
            type: "tuple",
            internalType: "struct Seal",
            components: [
              {
                name: "verifierSelector",
                type: "bytes4",
                internalType: "bytes4",
              },
              {
                name: "seal",
                type: "bytes32[8]",
                internalType: "bytes32[8]",
              },
              {
                name: "mode",
                type: "uint8",
                internalType: "enum ProofMode",
              },
            ],
          },
          {
            name: "callGuestId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "length",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callAssumptions",
            type: "tuple",
            internalType: "struct CallAssumptions",
            components: [
              {
                name: "proverContractAddress",
                type: "address",
                internalType: "address",
              },
              {
                name: "functionSelector",
                type: "bytes4",
                internalType: "bytes4",
              },
              {
                name: "settleChainId",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "settleBlockNumber",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "settleBlockHash",
                type: "bytes32",
                internalType: "bytes32",
              },
            ],
          },
        ],
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "setBlock",
    inputs: [
      {
        name: "blockNo",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setChain",
    inputs: [
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "blockNo",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "stringToAddress",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "error",
    name: "FailedInnerCall",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50612a638061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c806315706fdf1461005957806387cea3ae14610089578063ac6981e5146100a5578063faf924cf146100d6578063ffbc5638146100f4575b5f5ffd5b610073600480360381019061006e919061135f565b610110565b60405161008091906113e5565b60405180910390f35b6100a3600480360381019061009e9190611431565b6102ad565b005b6100bf60048036038101906100ba919061147e565b61038a565b6040516100cd92919061185d565b60405180910390f35b6100de6106e3565b6040516100eb919061188d565b60405180910390f35b61010e600480360381019061010991906118a7565b6106f8565b005b5f5f829050602a815114610159576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101509061193f565b60405180910390fd5b5f601467ffffffffffffffff8111156101755761017461123b565b5b6040519080825280601f01601f1916602001820160405280156101a75781602001600182028036833780820191505090505b5090505f5f90505b6014811015610296575f6101f684600280856101cb919061198a565b6101d591906119cb565b815181106101e6576101e56119fe565b5b602001015160f81c60f81b6107d8565b90505f61023785600360028661020c919061198a565b61021691906119cb565b81518110610227576102266119fe565b5b602001015160f81c60f81b6107d8565b90508060048360ff16901b1760f81b848481518110610259576102586119fe565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350505080806001019150506101af565b50806102a190611a8f565b60601c92505050919050565b7f2ae215ce9fde588adfdea92976dc9aa45aa006a0f63942d8f9f21bd4537972a35f1c73ffffffffffffffffffffffffffffffffffffffff166387cea3ae826040518263ffffffff1660e01b81526004016103089190611b04565b6020604051808303815f875af1158015610324573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103489190611b52565b610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e90611bc7565b60405180910390fd5b50565b61039261108c565b61039a6110be565b5f6103ad846103a890611ef9565b610a12565b90505f6103de604051806060016040528060278152602001612a0760279139835f0151610d6790919063ffffffff16565b90506002815114610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041b90611f55565b60405180910390fd5b5f81600181518110610439576104386119fe565b5b602002602001015190505f6104736040518060a00160405280606581526020016129a2606591398560400151610d6790919063ffffffff16565b905060048151146104b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b090611fbd565b60405180910390fd5b5f816001815181106104ce576104cd6119fe565b5b602002602001015190505f826002815181106104ed576104ec6119fe565b5b602002602001015190505f61051c8460038151811061050f5761050e6119fe565b5b6020026020010151610110565b90505f6105676040518060400160405280600881526020017f484f53504954414c00000000000000000000000000000000000000000000000081525084610e4e90919063ffffffff16565b156105755760019050610607565b6105bd6040518060400160405280600781526020017f494e53555245520000000000000000000000000000000000000000000000000081525084610e4e90919063ffffffff16565b156105cb5760029050610606565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fd90612025565b60405180910390fd5b5b5f6040518060a00160405280836002811115610626576106256115ad565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200188815260200186815260200160028b5f0151604051602001610669919061207d565b60405160208183030381529060405260405161068591906120cd565b602060405180830381855afa1580156106a0573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906106c3919061210d565b81525090506106d06106e3565b819a509a50505050505050505050915091565b6106eb61108c565b6106f3610e75565b905090565b7f2ae215ce9fde588adfdea92976dc9aa45aa006a0f63942d8f9f21bd4537972a35f1c73ffffffffffffffffffffffffffffffffffffffff1663ffbc563883836040518363ffffffff1660e01b8152600401610755929190612138565b6020604051808303815f875af1158015610771573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107959190611b52565b6107d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cb90611bc7565b60405180910390fd5b5050565b5f5f8260f81c90507f300000000000000000000000000000000000000000000000000000000000000060f81c60ff168160ff161015801561084257507f390000000000000000000000000000000000000000000000000000000000000060f81c60ff168160ff1611155b1561087e577f300000000000000000000000000000000000000000000000000000000000000060f81c81610876919061215f565b915050610a0d565b7f610000000000000000000000000000000000000000000000000000000000000060f81c60ff168160ff16101580156108e057507f660000000000000000000000000000000000000000000000000000000000000060f81c60ff168160ff1611155b15610928577f610000000000000000000000000000000000000000000000000000000000000060f81c81600a6109169190612193565b610920919061215f565b915050610a0d565b7f410000000000000000000000000000000000000000000000000000000000000060f81c60ff168160ff161015801561098a57507f460000000000000000000000000000000000000000000000000000000000000060f81c60ff168160ff1611155b156109d2577f410000000000000000000000000000000000000000000000000000000000000060f81c81600a6109c09190612193565b6109ca919061215f565b915050610a0d565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490612211565b60405180910390fd5b919050565b610a1a611112565b4282604001515f015167ffffffffffffffff1611610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a649061229f565b60405180910390fd5b610a75610e8c565b15610af2577fc16646301c7615357b8f8ee125956b0e5fbf972fa2a0c26feb1f1ae75d04103f5f1b8260400151604001518051906020012014610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae490612307565b60405180910390fd5b610c92565b610afa610ea9565b15610bca57610b07610f11565b73ffffffffffffffffffffffffffffffffffffffff166381e4c9a38360400151604001516040518263ffffffff1660e01b8152600401610b47919061236d565b602060405180830381865afa158015610b62573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b869190611b52565b610bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbc906123d7565b60405180910390fd5b610c91565b610bd2610f2c565b73ffffffffffffffffffffffffffffffffffffffff166381e4c9a38360400151604001516040518263ffffffff1660e01b8152600401610c12919061236d565b602060405180830381865afa158015610c2d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c519190611b52565b610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c87906123d7565b60405180910390fd5b5b5b5f5f600173f4e4fdca9d5d55e64525e314391996a15f7ec600610cb591906123f5565b73ffffffffffffffffffffffffffffffffffffffff1684604051602001610cdc91906125b8565b604051602081830303815290604052604051610cf891906120cd565b5f60405180830381855afa9150503d805f8114610d30576040519150601f19603f3d011682016040523d82523d5f602084013e610d35565b606091505b5091509150610d448282610f47565b505f81806020019051810190610d5a919061272b565b9050809350505050919050565b60605f5f601173f4e4fdca9d5d55e64525e314391996a15f7ec600610d8c91906123f5565b73ffffffffffffffffffffffffffffffffffffffff16604051806040016040528087815260200186815250604051602001610dc79190612821565b604051602081830303815290604052604051610de391906120cd565b5f60405180830381855afa9150503d805f8114610e1b576040519150601f19603f3d011682016040523d82523d5f602084013e610e20565b606091505b5091509150610e2f8282610f47565b5080806020019051810190610e449190612923565b9250505092915050565b5f81518351148015610e6d575081805190602001208380519060200120145b905092915050565b610e7d61108c565b610e8561108c565b8091505090565b5f610e95610f6b565b80610ea45750610ea3610f83565b5b905090565b5f6001461480610eb95750600a46145b80610ec45750608946145b80610ed0575061014446145b80610edc57506101e046145b80610ee8575061210546145b80610ef4575061a4b146145b80610f00575061a4ba46145b80610f0c575061e70846145b905090565b5f73565dca92902ea0ca597b5e62df0b47886b6b7d4d905090565b5f73c4e4dc291a5c4debe9ff5a3372f3fdd2e42bac86905090565b606082610f5c57610f5782611048565b610f64565b819050610f65565b5b92915050565b5f617a69461480610f7e57506204991946145b905090565b5f5f5f601e73f4e4fdca9d5d55e64525e314391996a15f7ec600610fa791906123f5565b73ffffffffffffffffffffffffffffffffffffffff16604051610fc99061298d565b5f60405180830381855afa9150503d805f8114611001576040519150601f19603f3d011682016040523d82523d5f602084013e611006565b606091505b509150915081158061101857505f8151145b15611027575f92505050611045565b5f8180602001905181019061103c9190611b52565b90508093505050505b90565b5f8151111561105a5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806080016040528061109f61113a565b81526020015f81526020015f81526020016110b8611190565b81525090565b6040518060a001604052805f60028111156110dc576110db6115ad565b5b81526020015f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f81525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b60405180606001604052805f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020016111726111ef565b81526020015f600181111561118a576111896115ad565b5b81525090565b6040518060a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020015f81526020015f81526020015f81525090565b604051806101000160405280600890602082028036833780820191505090505090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6112718261122b565b810181811067ffffffffffffffff821117156112905761128f61123b565b5b80604052505050565b5f6112a2611212565b90506112ae8282611268565b919050565b5f67ffffffffffffffff8211156112cd576112cc61123b565b5b6112d68261122b565b9050602081019050919050565b828183375f83830152505050565b5f6113036112fe846112b3565b611299565b90508281526020810184848401111561131f5761131e611227565b5b61132a8482856112e3565b509392505050565b5f82601f83011261134657611345611223565b5b81356113568482602086016112f1565b91505092915050565b5f602082840312156113745761137361121b565b5b5f82013567ffffffffffffffff8111156113915761139061121f565b5b61139d84828501611332565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6113cf826113a6565b9050919050565b6113df816113c5565b82525050565b5f6020820190506113f85f8301846113d6565b92915050565b5f819050919050565b611410816113fe565b811461141a575f5ffd5b50565b5f8135905061142b81611407565b92915050565b5f602082840312156114465761144561121b565b5b5f6114538482850161141d565b91505092915050565b5f5ffd5b5f606082840312156114755761147461145c565b5b81905092915050565b5f602082840312156114935761149261121b565b5b5f82013567ffffffffffffffff8111156114b0576114af61121f565b5b6114bc84828501611460565b91505092915050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114f9816114c5565b82525050565b5f60089050919050565b5f81905092915050565b5f819050919050565b5f819050919050565b61152e8161151c565b82525050565b5f61153f8383611525565b60208301905092915050565b5f602082019050919050565b611560816114ff565b61156a8184611509565b925061157582611513565b805f5b838110156115a557815161158c8782611534565b96506115978361154b565b925050600181019050611578565b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600281106115eb576115ea6115ad565b5b50565b5f8190506115fb826115da565b919050565b5f61160a826115ee565b9050919050565b61161a81611600565b82525050565b61014082015f8201516116355f8501826114f0565b5060208201516116486020850182611557565b50604082015161165c610120850182611611565b50505050565b61166b816113fe565b82525050565b61167a816113c5565b82525050565b60a082015f8201516116945f850182611671565b5060208201516116a760208501826114f0565b5060408201516116ba6040850182611662565b5060608201516116cd6060850182611662565b5060808201516116e06080850182611525565b50505050565b61022082015f8201516116fb5f850182611620565b50602082015161170f610140850182611525565b506040820151611723610160850182611662565b506060820151611737610180850182611680565b50505050565b6003811061174e5761174d6115ad565b5b50565b5f81905061175e8261173d565b919050565b5f61176d82611751565b9050919050565b61177d81611763565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6117b582611783565b6117bf818561178d565b93506117cf81856020860161179d565b6117d88161122b565b840191505092915050565b5f60a083015f8301516117f85f860182611774565b50602083015161180b6020860182611671565b506040830151848203604086015261182382826117ab565b9150506060830151848203606086015261183d82826117ab565b91505060808301516118526080860182611525565b508091505092915050565b5f610240820190506118715f8301856116e6565b81810361022083015261188481846117e3565b90509392505050565b5f610220820190506118a15f8301846116e6565b92915050565b5f5f604083850312156118bd576118bc61121b565b5b5f6118ca8582860161141d565b92505060206118db8582860161141d565b9150509250929050565b5f82825260208201905092915050565b7f496e76616c69642061646472657373206c656e677468000000000000000000005f82015250565b5f6119296016836118e5565b9150611934826118f5565b602082019050919050565b5f6020820190508181035f8301526119568161191d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611994826113fe565b915061199f836113fe565b92508282026119ad816113fe565b915082820484148315176119c4576119c361195d565b5b5092915050565b5f6119d5826113fe565b91506119e0836113fe565b92508282019050808211156119f8576119f761195d565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050919050565b5f819050602082019050919050565b5f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b5f611a7a8251611a44565b80915050919050565b5f82821b905092915050565b5f611a9982611a2b565b82611aa384611a35565b9050611aae81611a6f565b92506014821015611aee57611ae97fffffffffffffffffffffffffffffffffffffffff00000000000000000000000083601403600802611a83565b831692505b5050919050565b611afe816113fe565b82525050565b5f602082019050611b175f830184611af5565b92915050565b5f8115159050919050565b611b3181611b1d565b8114611b3b575f5ffd5b50565b5f81519050611b4c81611b28565b92915050565b5f60208284031215611b6757611b6661121b565b5b5f611b7484828501611b3e565b91505092915050565b7f4661696c6564206368656174636f646520696e766f636174696f6e00000000005f82015250565b5f611bb1601b836118e5565b9150611bbc82611b7d565b602082019050919050565b5f6020820190508181035f830152611bde81611ba5565b9050919050565b5f5ffd5b5f5ffd5b5f60ff82169050919050565b611c0281611bed565b8114611c0c575f5ffd5b50565b5f81359050611c1d81611bf9565b92915050565b5f67ffffffffffffffff82169050919050565b611c3f81611c23565b8114611c49575f5ffd5b50565b5f81359050611c5a81611c36565b92915050565b5f60808284031215611c7557611c74611be5565b5b611c7f6080611299565b90505f82013567ffffffffffffffff811115611c9e57611c9d611be9565b5b611caa84828501611332565b5f830152506020611cbd84828501611c0f565b602083015250604082013567ffffffffffffffff811115611ce157611ce0611be9565b5b611ced84828501611332565b6040830152506060611d0184828501611c4c565b60608301525092915050565b5f67ffffffffffffffff821115611d2757611d2661123b565b5b611d308261122b565b9050602081019050919050565b5f611d4f611d4a84611d0d565b611299565b905082815260208101848484011115611d6b57611d6a611227565b5b611d768482856112e3565b509392505050565b5f82601f830112611d9257611d91611223565b5b8135611da2848260208601611d3d565b91505092915050565b5f60608284031215611dc057611dbf611be5565b5b611dca6060611299565b90505f611dd984828501611c4c565b5f83015250602082013567ffffffffffffffff811115611dfc57611dfb611be9565b5b611e0884828501611d7e565b602083015250604082013567ffffffffffffffff811115611e2c57611e2b611be9565b5b611e3884828501611d7e565b60408301525092915050565b5f60608284031215611e5957611e58611be5565b5b611e636060611299565b90505f82013567ffffffffffffffff811115611e8257611e81611be9565b5b611e8e84828501611332565b5f83015250602082013567ffffffffffffffff811115611eb157611eb0611be9565b5b611ebd84828501611c60565b602083015250604082013567ffffffffffffffff811115611ee157611ee0611be9565b5b611eed84828501611dab565b60408301525092915050565b5f611f043683611e44565b9050919050565b7f496e76616c696420656d61696c20666f726d61740000000000000000000000005f82015250565b5f611f3f6014836118e5565b9150611f4a82611f0b565b602082019050919050565b5f6020820190508181035f830152611f6c81611f33565b9050919050565b7f496e76616c696420726567697374726174696f6e20666f726d617400000000005f82015250565b5f611fa7601b836118e5565b9150611fb282611f73565b602082019050919050565b5f6020820190508181035f830152611fd481611f9b565b9050919050565b7f496e76616c696420726f6c6520747970650000000000000000000000000000005f82015250565b5f61200f6011836118e5565b915061201a82611fdb565b602082019050919050565b5f6020820190508181035f83015261203c81612003565b9050919050565b5f81905092915050565b5f61205782611783565b6120618185612043565b935061207181856020860161179d565b80840191505092915050565b5f612088828461204d565b915081905092915050565b5f81905092915050565b5f6120a782611a2b565b6120b18185612093565b93506120c181856020860161179d565b80840191505092915050565b5f6120d8828461209d565b915081905092915050565b6120ec8161151c565b81146120f6575f5ffd5b50565b5f81519050612107816120e3565b92915050565b5f602082840312156121225761212161121b565b5b5f61212f848285016120f9565b91505092915050565b5f60408201905061214b5f830185611af5565b6121586020830184611af5565b9392505050565b5f61216982611bed565b915061217483611bed565b9250828203905060ff81111561218d5761218c61195d565b5b92915050565b5f61219d82611bed565b91506121a883611bed565b9250828201905060ff8111156121c1576121c061195d565b5b92915050565b7f496e76616c6964206865782063686172616374657200000000000000000000005f82015250565b5f6121fb6015836118e5565b9150612206826121c7565b602082019050919050565b5f6020820190508181035f830152612228816121ef565b9050919050565b7f456d61696c50726f6f663a206578706972656420444e532076657269666963615f8201527f74696f6e00000000000000000000000000000000000000000000000000000000602082015250565b5f6122896024836118e5565b91506122948261222f565b604082019050919050565b5f6020820190508181035f8301526122b68161227d565b9050919050565b7f4e6f7420612076616c69642056444e532068617264636f646564206b657900005f82015250565b5f6122f1601e836118e5565b91506122fc826122bd565b602082019050919050565b5f6020820190508181035f83015261231e816122e5565b9050919050565b5f82825260208201905092915050565b5f61233f82611a2b565b6123498185612325565b935061235981856020860161179d565b6123628161122b565b840191505092915050565b5f6020820190508181035f8301526123858184612335565b905092915050565b7f4e6f7420612076616c69642056444e53207075626c6963206b657900000000005f82015250565b5f6123c1601b836118e5565b91506123cc8261238d565b602082019050919050565b5f6020820190508181035f8301526123ee816123b5565b9050919050565b5f6123ff826113a6565b915061240a836113a6565b9250828201905073ffffffffffffffffffffffffffffffffffffffff8111156124365761243561195d565b5b92915050565b61244581611bed565b82525050565b61245481611c23565b82525050565b5f608083015f8301518482035f86015261247482826117ab565b9150506020830151612489602086018261243c565b50604083015184820360408601526124a182826117ab565b91505060608301516124b6606086018261244b565b508091505092915050565b5f82825260208201905092915050565b5f6124db82611a2b565b6124e581856124c1565b93506124f581856020860161179d565b6124fe8161122b565b840191505092915050565b5f606083015f83015161251e5f86018261244b565b506020830151848203602086015261253682826124d1565b9150506040830151848203604086015261255082826124d1565b9150508091505092915050565b5f606083015f8301518482035f86015261257782826117ab565b91505060208301518482036020860152612591828261245a565b915050604083015184820360408601526125ab8282612509565b9150508091505092915050565b5f6020820190508181035f8301526125d0818461255d565b905092915050565b5f6125ea6125e5846112b3565b611299565b90508281526020810184848401111561260657612605611227565b5b61261184828561179d565b509392505050565b5f82601f83011261262d5761262c611223565b5b815161263d8482602086016125d8565b91505092915050565b5f6080828403121561265b5761265a611be5565b5b6126656080611299565b90505f82015167ffffffffffffffff81111561268457612683611be9565b5b61269084828501612619565b5f83015250602082015167ffffffffffffffff8111156126b3576126b2611be9565b5b6126bf84828501612619565b602083015250604082015167ffffffffffffffff8111156126e3576126e2611be9565b5b6126ef84828501612619565b604083015250606082015167ffffffffffffffff81111561271357612712611be9565b5b61271f84828501612619565b60608301525092915050565b5f602082840312156127405761273f61121b565b5b5f82015167ffffffffffffffff81111561275d5761275c61121f565b5b61276984828501612646565b91505092915050565b5f60029050919050565b5f81905092915050565b5f819050919050565b5f61279a83836117ab565b905092915050565b5f602082019050919050565b5f6127b882612772565b6127c2818561277c565b9350836020820285016127d485612786565b805f5b8581101561280f57848403895281516127f0858261278f565b94506127fb836127a2565b925060208a019950506001810190506127d7565b50829750879550505050505092915050565b5f6020820190508181035f83015261283981846127ae565b905092915050565b5f67ffffffffffffffff82111561285b5761285a61123b565b5b602082029050602081019050919050565b5f5ffd5b5f61288261287d84612841565b611299565b905080838252602082019050602084028301858111156128a5576128a461286c565b5b835b818110156128ec57805167ffffffffffffffff8111156128ca576128c9611223565b5b8086016128d78982612619565b855260208501945050506020810190506128a7565b5050509392505050565b5f82601f83011261290a57612909611223565b5b815161291a848260208601612870565b91505092915050565b5f602082840312156129385761293761121b565b5b5f82015167ffffffffffffffff8111156129555761295461121f565b5b612961848285016128f6565b91505092915050565b50565b5f6129785f83612093565b91506129838261296a565b5f82019050919050565b5f6129978261296d565b915081905091905056fe5e5265676973746572206f7267616e697a6174696f6e20285b5e5c735d2b283f3a5c732b5b5e5c735d2b292a292061732028484f53504954414c7c494e53555245522920776974682077616c6c65743a202830785b612d66412d46302d395d7b34307d29245e5b5c772e2d5d2b40285b612d7a412d5a5c642e2d5d2b5c2e5b612d7a412d5a5d7b322c7d2924a2646970667358221220c1432b90195d3b3c21757aa861b0c8ad187beee2487f88724e63e83a874e0f5264736f6c634300081c0033";

type HealthcareRegistrationProverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HealthcareRegistrationProverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HealthcareRegistrationProver__factory extends ContractFactory {
  constructor(...args: HealthcareRegistrationProverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      HealthcareRegistrationProver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): HealthcareRegistrationProver__factory {
    return super.connect(runner) as HealthcareRegistrationProver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HealthcareRegistrationProverInterface {
    return new Interface(_abi) as HealthcareRegistrationProverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): HealthcareRegistrationProver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as HealthcareRegistrationProver;
  }
}
