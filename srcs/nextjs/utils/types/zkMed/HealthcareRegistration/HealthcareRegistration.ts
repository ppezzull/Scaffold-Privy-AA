/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SealStruct = {
  verifierSelector: BytesLike;
  seal: BytesLike[];
  mode: BigNumberish;
};

export type SealStructOutput = [
  verifierSelector: string,
  seal: string[],
  mode: bigint
] & { verifierSelector: string; seal: string[]; mode: bigint };

export type CallAssumptionsStruct = {
  proverContractAddress: AddressLike;
  functionSelector: BytesLike;
  settleChainId: BigNumberish;
  settleBlockNumber: BigNumberish;
  settleBlockHash: BytesLike;
};

export type CallAssumptionsStructOutput = [
  proverContractAddress: string,
  functionSelector: string,
  settleChainId: bigint,
  settleBlockNumber: bigint,
  settleBlockHash: string
] & {
  proverContractAddress: string;
  functionSelector: string;
  settleChainId: bigint;
  settleBlockNumber: bigint;
  settleBlockHash: string;
};

export type ProofStruct = {
  seal: SealStruct;
  callGuestId: BytesLike;
  length: BigNumberish;
  callAssumptions: CallAssumptionsStruct;
};

export type ProofStructOutput = [
  seal: SealStructOutput,
  callGuestId: string,
  length: bigint,
  callAssumptions: CallAssumptionsStructOutput
] & {
  seal: SealStructOutput;
  callGuestId: string;
  length: bigint;
  callAssumptions: CallAssumptionsStructOutput;
};

export declare namespace HealthcareRegistration {
  export type UserRecordStruct = {
    userType: BigNumberish;
    walletAddress: AddressLike;
    domain: string;
    organizationName: string;
    emailHash: BytesLike;
    registrationTime: BigNumberish;
    isActive: boolean;
  };

  export type UserRecordStructOutput = [
    userType: bigint,
    walletAddress: string,
    domain: string,
    organizationName: string,
    emailHash: string,
    registrationTime: bigint,
    isActive: boolean
  ] & {
    userType: bigint;
    walletAddress: string;
    domain: string;
    organizationName: string;
    emailHash: string;
    registrationTime: bigint;
    isActive: boolean;
  };
}

export declare namespace HealthcareRegistrationProver {
  export type RegistrationDataStruct = {
    requestedRole: BigNumberish;
    walletAddress: AddressLike;
    domain: string;
    organizationName: string;
    emailHash: BytesLike;
  };

  export type RegistrationDataStructOutput = [
    requestedRole: bigint,
    walletAddress: string,
    domain: string,
    organizationName: string,
    emailHash: string
  ] & {
    requestedRole: bigint;
    walletAddress: string;
    domain: string;
    organizationName: string;
    emailHash: string;
  };
}

export interface HealthcareRegistrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_setTestVerifier"
      | "addAdmin"
      | "admins"
      | "deactivateUser"
      | "domainToUser"
      | "emailDomainProver"
      | "getDomainOwner"
      | "getRegistrationStats"
      | "getUserRecord"
      | "getUserType"
      | "isDomainTaken"
      | "isHospital"
      | "isInsurer"
      | "isPatient"
      | "isUserRegistered"
      | "owner"
      | "registerHospitalWithMailProof"
      | "registerInsurerWithMailProof"
      | "registerPatient"
      | "registeredUsers"
      | "renounceOwnership"
      | "totalHospitals"
      | "totalInsurers"
      | "totalPatients"
      | "totalRegisteredUsers"
      | "transferOwnership"
      | "updateAdminPermissions"
      | "usedEmailHashes"
      | "validateHospitalDomain"
      | "validateInsurerDomain"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "HospitalRegistered"
      | "InsurerRegistered"
      | "OwnershipTransferred"
      | "PatientRegistered"
      | "UserDeactivated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_setTestVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "deactivateUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "domainToUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emailDomainProver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRecord",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDomainTaken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isHospital",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInsurer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPatient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerHospitalWithMailProof",
    values: [HealthcareRegistrationProver.RegistrationDataStruct, ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInsurerWithMailProof",
    values: [HealthcareRegistrationProver.RegistrationDataStruct, ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPatient",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHospitals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInsurers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPatients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRegisteredUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdminPermissions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedEmailHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateHospitalDomain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateInsurerDomain",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_setTestVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emailDomainProver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDomainTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHospital", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isInsurer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPatient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerHospitalWithMailProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInsurerWithMailProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHospitals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInsurers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRegisteredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdminPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedEmailHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateHospitalDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateInsurerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike, role: BigNumberish];
  export type OutputTuple = [admin: string, role: bigint];
  export interface OutputObject {
    admin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HospitalRegisteredEvent {
  export type InputTuple = [
    hospital: AddressLike,
    domain: string,
    emailHash: BytesLike
  ];
  export type OutputTuple = [
    hospital: string,
    domain: string,
    emailHash: string
  ];
  export interface OutputObject {
    hospital: string;
    domain: string;
    emailHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsurerRegisteredEvent {
  export type InputTuple = [
    insurer: AddressLike,
    domain: string,
    emailHash: BytesLike
  ];
  export type OutputTuple = [
    insurer: string,
    domain: string,
    emailHash: string
  ];
  export interface OutputObject {
    insurer: string;
    domain: string;
    emailHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PatientRegisteredEvent {
  export type InputTuple = [patient: AddressLike];
  export type OutputTuple = [patient: string];
  export interface OutputObject {
    patient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserDeactivatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HealthcareRegistration extends BaseContract {
  connect(runner?: ContractRunner | null): HealthcareRegistration;
  waitForDeployment(): Promise<this>;

  interface: HealthcareRegistrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _setTestVerifier: TypedContractMethod<
    [newVerifier: AddressLike],
    [void],
    "nonpayable"
  >;

  addAdmin: TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isActive: boolean;
        role: bigint;
        permissions: bigint;
      }
    ],
    "view"
  >;

  deactivateUser: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  domainToUser: TypedContractMethod<[arg0: string], [string], "view">;

  emailDomainProver: TypedContractMethod<[], [string], "view">;

  getDomainOwner: TypedContractMethod<[domain: string], [string], "view">;

  getRegistrationStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUsers: bigint;
        patients: bigint;
        hospitals: bigint;
        insurers: bigint;
      }
    ],
    "view"
  >;

  getUserRecord: TypedContractMethod<
    [user: AddressLike],
    [HealthcareRegistration.UserRecordStructOutput],
    "view"
  >;

  getUserType: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isDomainTaken: TypedContractMethod<[domain: string], [boolean], "view">;

  isHospital: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isInsurer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isPatient: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isUserRegistered: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerHospitalWithMailProof: TypedContractMethod<
    [
      registrationData: HealthcareRegistrationProver.RegistrationDataStruct,
      arg1: ProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registerInsurerWithMailProof: TypedContractMethod<
    [
      registrationData: HealthcareRegistrationProver.RegistrationDataStruct,
      arg1: ProofStruct
    ],
    [void],
    "nonpayable"
  >;

  registerPatient: TypedContractMethod<
    [patientWallet: AddressLike, patientEmailHash: BytesLike],
    [void],
    "nonpayable"
  >;

  registeredUsers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, string, string, bigint, boolean] & {
        userType: bigint;
        walletAddress: string;
        domain: string;
        organizationName: string;
        emailHash: string;
        registrationTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalHospitals: TypedContractMethod<[], [bigint], "view">;

  totalInsurers: TypedContractMethod<[], [bigint], "view">;

  totalPatients: TypedContractMethod<[], [bigint], "view">;

  totalRegisteredUsers: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAdminPermissions: TypedContractMethod<
    [admin: AddressLike, permissions: BigNumberish],
    [void],
    "nonpayable"
  >;

  usedEmailHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  validateHospitalDomain: TypedContractMethod<
    [domain: string],
    [boolean],
    "view"
  >;

  validateInsurerDomain: TypedContractMethod<
    [domain: string],
    [boolean],
    "view"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_setTestVerifier"
  ): TypedContractMethod<[newVerifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<
    [newAdmin: AddressLike, role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isActive: boolean;
        role: bigint;
        permissions: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deactivateUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "domainToUser"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "emailDomainProver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDomainOwner"
  ): TypedContractMethod<[domain: string], [string], "view">;
  getFunction(
    nameOrSignature: "getRegistrationStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUsers: bigint;
        patients: bigint;
        hospitals: bigint;
        insurers: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRecord"
  ): TypedContractMethod<
    [user: AddressLike],
    [HealthcareRegistration.UserRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserType"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isDomainTaken"
  ): TypedContractMethod<[domain: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isHospital"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isInsurer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPatient"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUserRegistered"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerHospitalWithMailProof"
  ): TypedContractMethod<
    [
      registrationData: HealthcareRegistrationProver.RegistrationDataStruct,
      arg1: ProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerInsurerWithMailProof"
  ): TypedContractMethod<
    [
      registrationData: HealthcareRegistrationProver.RegistrationDataStruct,
      arg1: ProofStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPatient"
  ): TypedContractMethod<
    [patientWallet: AddressLike, patientEmailHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredUsers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, string, string, string, string, bigint, boolean] & {
        userType: bigint;
        walletAddress: string;
        domain: string;
        organizationName: string;
        emailHash: string;
        registrationTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalHospitals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInsurers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPatients"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRegisteredUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAdminPermissions"
  ): TypedContractMethod<
    [admin: AddressLike, permissions: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedEmailHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "validateHospitalDomain"
  ): TypedContractMethod<[domain: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "validateInsurerDomain"
  ): TypedContractMethod<[domain: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "HospitalRegistered"
  ): TypedContractEvent<
    HospitalRegisteredEvent.InputTuple,
    HospitalRegisteredEvent.OutputTuple,
    HospitalRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "InsurerRegistered"
  ): TypedContractEvent<
    InsurerRegisteredEvent.InputTuple,
    InsurerRegisteredEvent.OutputTuple,
    InsurerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PatientRegistered"
  ): TypedContractEvent<
    PatientRegisteredEvent.InputTuple,
    PatientRegisteredEvent.OutputTuple,
    PatientRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "UserDeactivated"
  ): TypedContractEvent<
    UserDeactivatedEvent.InputTuple,
    UserDeactivatedEvent.OutputTuple,
    UserDeactivatedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address,uint8)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "HospitalRegistered(address,string,bytes32)": TypedContractEvent<
      HospitalRegisteredEvent.InputTuple,
      HospitalRegisteredEvent.OutputTuple,
      HospitalRegisteredEvent.OutputObject
    >;
    HospitalRegistered: TypedContractEvent<
      HospitalRegisteredEvent.InputTuple,
      HospitalRegisteredEvent.OutputTuple,
      HospitalRegisteredEvent.OutputObject
    >;

    "InsurerRegistered(address,string,bytes32)": TypedContractEvent<
      InsurerRegisteredEvent.InputTuple,
      InsurerRegisteredEvent.OutputTuple,
      InsurerRegisteredEvent.OutputObject
    >;
    InsurerRegistered: TypedContractEvent<
      InsurerRegisteredEvent.InputTuple,
      InsurerRegisteredEvent.OutputTuple,
      InsurerRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PatientRegistered(address)": TypedContractEvent<
      PatientRegisteredEvent.InputTuple,
      PatientRegisteredEvent.OutputTuple,
      PatientRegisteredEvent.OutputObject
    >;
    PatientRegistered: TypedContractEvent<
      PatientRegisteredEvent.InputTuple,
      PatientRegisteredEvent.OutputTuple,
      PatientRegisteredEvent.OutputObject
    >;

    "UserDeactivated(address)": TypedContractEvent<
      UserDeactivatedEvent.InputTuple,
      UserDeactivatedEvent.OutputTuple,
      UserDeactivatedEvent.OutputObject
    >;
    UserDeactivated: TypedContractEvent<
      UserDeactivatedEvent.InputTuple,
      UserDeactivatedEvent.OutputTuple,
      UserDeactivatedEvent.OutputObject
    >;
  };
}
