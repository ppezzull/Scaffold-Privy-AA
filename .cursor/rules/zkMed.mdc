---
description: 
globs: 
alwaysApply: false
---
# zkMed Project Intelligence - Cursor Rules

## Project Overview
zkMed is a privacy-preserving health claims platform using zero-knowledge proofs, vlayer email verification, and smart contracts on Ethereum. The core innovation is processing health insurance claims without exposing any personal or medical data on-chain.

## Critical Architecture Patterns

### Privacy-First Development
- **NEVER store personal data on-chain** - Use commitment schemes, hashes, and zero-knowledge proofs
- **Event design**: Emit events for audit trails but ensure no PII/PHI in event data
- **Storage minimization**: Only store essential verification data, use off-chain storage for sensitive data
- **Commitment pattern**: `keccak256(abi.encodePacked(secret, address))` for patient registration

### Smart Contract Standards
- **Foundry-based development**: Use `forge build`, `forge test`, `forge fmt` for all contract work
- **OpenZeppelin patterns**: Inherit from OZ contracts for security (AccessControl, ReentrancyGuard, etc.)
- **vlayer integration**: Use vlayer SDK 1.0.2 for email proofs, follow their prover/verifier pattern
- **Gas optimization priority**: Target <50k gas for patient operations, <100k for organization verification

### Code Organization Preferences
- **Solidity version**: Always use `^0.8.21` for new contracts
- **Import style**: Use explicit imports from `openzeppelin-contracts/` and `vlayer-0.1.0/`
- **Role-based access**: Single role per address, verification separate from role assignment
- **Error handling**: Use custom errors for gas efficiency, provide clear error messages
## vlayer Integration Patterns

### Email Proof Workflow
1. vlayer sends token to `admin@domain`
2. User pastes token back into frontend
3. Generate proof without exposing email address
4. Submit proof to smart contract for verification
5. Store only domain name on-chain, never email addresses

### Proof Generation Best Practices
- Use TypeScript with strict mode for vlayer client code
- Implement retry mechanisms with exponential backoff
- Cache proofs when possible to avoid regeneration
- Provide user feedback during 15-30 second proof generation

## Development Workflow Intelligence

### Testing Approach
- **Unit tests**: 100% coverage for critical functions using forge-std
- **Integration tests**: Mock vlayer responses for reliable CI/CD
- **Privacy tests**: Verify no personal data appears in storage or events
- **Gas tests**: Automated gas reporting to catch regressions

### File Structure Patterns
```
backend/src/
├── core/           # Core contracts (Registration, Claims, Insurance)
├── vlayer/         # vlayer integration contracts and provers
├── utils/          # Shared utilities and libraries
└── interfaces/     # Contract interfaces and external integrations
```

### Frontend Architecture (Planned)
- **Next.js 15+**: Use App Router and Server Components
- **Thirdweb**: SIWE authentication for wallet connections
- **Server Actions**: Handle on-chain transactions securely
- **Progressive enhancement**: Work without JavaScript for core functions

## Common Patterns and Solutions

### Patient Registration Flow
```solidity
function registerPatient(bytes32 _commitment) external {
    require(commitments[msg.sender] == bytes32(0), "Already registered");
    commitments[msg.sender] = _commitment;
    roles[msg.sender] = Role.Patient;
    emit PatientRegistered(msg.sender, _commitment); // No personal data!
}
```

### Organization Verification Flow
```solidity
function verifyOrganization(
    Proof calldata emailProof,
    string calldata domain,
    Role role
) external onlyVerified(VLAYER_EMAIL_PROVER, EmailProver.verifyDomain.selector) {
    require(role == Role.Hospital || role == Role.Insurer, "Invalid org role");
    organizationDomains[msg.sender] = domain;
    roles[msg.sender] = role;
    verified[msg.sender] = true;
    emit OrganizationVerified(msg.sender, domain, role);
}
```

### Gas Optimization Techniques
- Pack multiple values into single storage slots
- Use events instead of storage for non-critical data
- Batch operations when possible
- Consider proxy patterns for upgradability

## Error Handling Patterns

### Smart Contract Errors
```solidity
error AlreadyRegistered();
error InvalidRole();
error NotVerified();
error ProofVerificationFailed(string reason);
```

### Frontend Error Recovery
- Retry mechanisms for network failures
- Graceful degradation when vlayer is unavailable
- User-friendly error messages that don't expose technical details
- Fallback workflows for critical operations

## Security Considerations

### Access Control Layering
```solidity
modifier onlyVerifiedRole(Role _role) {
    require(roles[msg.sender] == _role, "Wrong role");
    require(verified[msg.sender], "Not verified");
    require(block.timestamp <= verificationExpiry[msg.sender], "Expired");
    _;
}
```

### Reentrancy Protection
- Always use OpenZeppelin's `ReentrancyGuard` for functions that transfer value
- Follow checks-effects-interactions pattern
- Be especially careful with claim payout functions

## Performance Targets

### Smart Contract Metrics
- Patient registration: <50k gas
- Organization verification: <100k gas  
- Claim submission: <150k gas
- Proof verification: <80k gas

### User Experience Metrics
- Proof generation: <30 seconds
- Page load times: <3 seconds
- Mobile responsiveness: 100%
- Accessibility: WCAG 2.1 AA compliance

## Integration Points

### vlayer SDK Usage
```typescript
import { createVlayerClient } from "@vlayer/sdk";
import { getConfig, createContext } from "@vlayer/sdk/config";

// Always handle errors gracefully
try {
    const proof = await vlayer.prove({
        address: prover,
        proverAbi: proverSpec.abi,
        functionName: "verifyEmail",
        args: [domain, token],
        chainId: chain.id
    });
} catch (error) {
    // Implement retry logic
    console.error("Proof generation failed:", error);
}
```

### Foundry Development
```bash
# Standard workflow
forge build                 # Always succeeds before committing
forge test                  # Run full test suite
forge test --gas-report    # Check gas usage
forge fmt                  # Format code consistently
```

## Common Gotchas and Solutions

### vlayer Integration
- **Issue**: Proof generation can timeout
- **Solution**: Implement proper timeout handling and retry mechanisms

### Gas Optimization
- **Issue**: Complex operations can exceed block gas limit
- **Solution**: Break into multiple transactions or use batch processing

### Privacy Compliance
- **Issue**: Easy to accidentally expose data in events
- **Solution**: Always review event parameters for PII/PHI exposure

### Role Management
- **Issue**: Complex role hierarchies can create security vulnerabilities
- **Solution**: Keep roles simple and separate verification from assignment

## Development Environment Setup
```bash
# Required tools
node --version    # Should be 18+
bun --version     # Latest for fast package management
forge --version   # Latest foundry
docker --version  # For vlayer devnet

# Project setup
cd backend && forge build
cd backend/vlayer && bun install
bun run devnet:up  # Start local vlayer network
```

## Code Quality Standards
- **Solidity**: Follow Solidity style guide, use forge fmt and dont use emojis
- **TypeScript**: Strict mode, no `any` types in production code
- **Testing**: Property-based testing for complex logic
- **Documentation**: NatSpec for all public functions

## Deployment Strategy
- **Local**: Anvil + vlayer devnet for development
- **Staging**: Sepolia + vlayer testnet for integration testing
- **Production**: Ethereum mainnet + vlayer mainnet

This `.cursorrules` file captures the essential patterns and intelligence needed to work effectively on the zkMed platform. Update as new patterns emerge during development. 
